name: APP_CI

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/app_ci.yml'
      - 'target_root_app/**'

  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/app_ci.yml'
      - 'target_root_app/**'

  workflow_dispatch:

jobs:
  main_build:
    runs-on: ubuntu-20.04
    timeout-minutes: 360
    steps:
      - uses: actions/checkout@v4



      - name: Install prerequisites
        shell: bash -l {0}
        run: |
          rm -rf ./.git
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
          sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'
          sudo apt update
          sudo apt install -y wget device-tree-compiler ninja-build git build-essential bison   \
                pkg-config zlib1g-dev libglib2.0-0 libglib2.0-dev libsdl1.2-dev libpixman-1-dev \
                libfdt-dev autoconf automake libtool librbd-dev libaio-dev flex libattr1-dev    \
                make cmake gcc python3 vim swig python3-dev libedit-dev libgtk-3-dev intltool   \
                libncurses5-dev liblzma-dev lua5.3 liblua5.3-dev libxml2-dev doxygen graphviz   \
                gperf libcap-ng-dev mtd-utils autoconf-archive glslang-tools gdebi-core
          sudo gdebi -n ./.github/workflows/res/meson_1.0.1-5ubuntu1_all.deb 
          conda create -n build_x11_env python=3.8.10 -y
          conda install mako

      - name: Cache toolchain
        uses: actions/cache@v3
        env:
          cache-name: cache-toolchain
        with:
          path: |
            /opt/gcc-riscv64-unknown-linux-gnu
            /opt/gcc-riscv64-unknown-elf
          key: ${{ runner.os }}-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Download and extract prebuilt toolchain
        shell: bash -l {0}
        run: |
          RISCV_GLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-linux-gnu
          RISCV_NEWLIBC_TOOLCHAIN=/opt/gcc-riscv64-unknown-elf
          if [ ! -d "$RISCV_GLIBC_TOOLCHAIN" ]; then
            # download prebuilt toolchain
            wget https://github.com/riscv/riscv-gnu-toolchain/releases/download/2021.08.07/riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
            tar -xzf riscv64-glibc-ubuntu-20.04-nightly-2021.08.07-nightly.tar.gz
            mv riscv $RISCV_GLIBC_TOOLCHAIN
            rm -f *.tar.gz
            # strip binaries
            cd $RISCV_GLIBC_TOOLCHAIN
            set +e
            for i in `find libexec bin -type f`
            do
              strip -s $i
            done
            cd -
            $RISCV_GLIBC_TOOLCHAIN/bin/riscv64-unknown-linux-gnu-gcc -v
          fi
          if [ ! -d "$RISCV_NEWLIBC_TOOLCHAIN" ]; then
            # download prebuilt toolchain
            wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
            tar -xzf riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14.tar.gz
            mv riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-linux-ubuntu14 $RISCV_NEWLIBC_TOOLCHAIN
            rm -f *.tar.gz
            # strip binaries
            cd $RISCV_NEWLIBC_TOOLCHAIN
            set +e
            for i in `find libexec bin -type f`
            do
              strip -s $i
            done
            cd -
            $RISCV_NEWLIBC_TOOLCHAIN/bin/riscv64-unknown-elf-gcc -v
          fi

      - name: Build make
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh make

      - name: Build ncurses
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh ncurses

      - name: Build zstd
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh zstd

      - name: Build bash
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh bash

      - name: Build sudo
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh sudo

      - name: Build screenfetch
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh screenfetch

      - name: Build tree
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh tree

      - name: Build libevent
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libevent

      - name: Build screen
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh screen

      - name: Build cu
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh cu

      - name: Build icu
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh icu
  
      - name: Build libmnl
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libmnl

      - name: Build ethtool
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh ethtool

      - name: Build zlib
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh zlib

      - name: Build openssl
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh openssl

      - name: Build openssh
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh openssh

      - name: Build libpng
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libpng

      - name: Build freetype
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh freetype

      - name: Build libuuid
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libuuid

      - name: Build libx11
        shell: bash -l {0}
        run: |
          cd target_root_app
          conda activate build_x11_env
          ./build.sh libx11

      - name: Build cups
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh cups

      - name: Build libxml2
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libxml2

      - name: Build fontconfig
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh fontconfig

      - name: Build libffi
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libffi

      - name: Build alsa_lib
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh alsa_lib

      - name: Build alsa_utils
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh alsa_utils

      - name: Build openjdk_zero
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh openjdk_zero
          rm -rf host_output/opt/jdk-10

      - name: Build lzo
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh lzo

      - name: Build attr
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh attr

      - name: Build dtc
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh dtc

      - name: Build kvmtool
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh kvmtool

      - name: Build gdb
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh gdb

      - name: Build trace_cmd
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh trace_cmd

      - name: Build lrzsz
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh lrzsz

      - name: Build libexpat
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libexpat

      - name: Build libdaemon
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libdaemon

      - name: Build avahi
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh avahi

      - name: Build iperf3
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh iperf3

      - name: Build util_linux
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh util_linux 

      - name: Build iproute2
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh iproute2

      - name: Build can-utils
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh can-utils

      - name: Build libuev
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libuev

      - name: Build libite
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libite

      - name: Build confuse
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh confuse

      - name: Build watchdogd
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh watchdogd

      - name: Build mtd_utils
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh mtd_utils

      - name: Build coreutils
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh coreutils

      - name: Build i2c_tools
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh i2c_tools

      - name: Build libgpiod
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libgpiod

      - name: Build libusb
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libusb

      - name: Build strace
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh strace

      - name: Build libnl
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libnl

      - name: Build readline
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh readline

      - name: Build libpcap
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libpcap

      - name: Build dropwatch
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh dropwatch

      - name: Build tcpdump
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh tcpdump

      - name: Build spi_tools
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh spi_tools

      - name: Build ell
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh ell

      - name: Build pcre
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh pcre

      - name: Build elfutils
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh elfutils

      - name: Build glib2
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh glib2

      - name: Build irqbalance
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh irqbalance

      - name: Build lighttpd
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh lighttpd

      - name: Build llvm
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh llvm

      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Build libdrm
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libdrm

      - name: Build mesa
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh mesa

      - name: Build libepoxy
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh libepoxy
      
      - name: Build vulkanloader
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh vulkanloader
      
      - name: Build virglrenderer
        shell: bash -l {0}
        run: |
          cd target_root_app
          ./build.sh virglrenderer

      #- name: Build qt
      #  shell: bash -l {0}
      #  run: |
      #    cd target_root_app
      #    ./build.sh qt

      #- name: Build qt example
      #  shell: bash -l {0}
      #  run: |
      #    cd target_user_app/qt_example
      #    ./build.sh

      #- name: Packet host_tools
      #  shell: bash -l {0}
      #  run: |
      #    cd target_root_app
      #    mv host_output host_tools
      #    tar -czf host_tools.tar.gz host_tools/
      #    mv host_tools.tar.gz ../host_tools.tar.gz

      - name: Packet target_sysroot
        shell: bash -l {0}
        run: |
          cd target_root_app
          mv output target_sysroot
          tar -czf target_sysroot.tar.gz target_sysroot/
          mv target_sysroot.tar.gz ../target_sysroot.tar.gz

      - name: Upload build asserts
        uses: actions/upload-artifact@v4
        with:
          name: target_sysroot
          path: |
            target_sysroot.tar.gz

      #- name: Upload build asserts
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: host_tools
      #    path: |
      #      host_tools.tar.gz

